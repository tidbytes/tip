program = function+

function = identifier <whitespace?> arg-list <b-open> statements return <b-close>

arg-list = <p-open> args <p-close>

<args> = identifier? (<comma> identifier)*

expr-list = <p-open> expr? (<comma> expr)* <p-close>

var-decl = <'var'> <whitespace> args <semi-c>

<expr> = constant | identifier | comparison | calculation | invocation | input
       | null | dynamic-call | function-call | malloc

null = <'null'>
input = <'input'>
malloc = <'malloc'>

dynamic-call = <p-open> expr <p-close> expr-list
function-call = identifier expr-list

<comparison> = equals
             | greater-than
             | less-than

equals = expr <whitespace?> <'=='> <whitespace?> expr
greater-than = expr <whitespace?> <'>'> <whitespace?> expr
less-than = expr <whitespace?> <'<'> <whitespace?> expr

<calculation> = addition
              | subtraction
              | multiplication
              | division

addition = expr <whitespace?> <'+'> <whitespace?> expr
subtraction = expr <whitespace?> <'-'> <whitespace?> expr
multiplication = expr <whitespace?> <'*'> <whitespace?> expr
division = expr <whitespace?> <'/'> <whitespace?> expr

<statement> = assignment
            | output
            | if-statement
            | if-statement else-statement
            | while
            | var-decl

assignment = identifier <whitespace?> <'='> <whitespace?> expr <semi-c>

output = <'output'> expr <semi-c>

while = <'while'> <p-open> expr <p-close> statement
      | <'while'> <p-open> expr <p-close> <b-open> statements <b-close>

if-statement = <'if'> <p-open> expr <p-close> statement
             | <'if'> <p-open> expr <p-close> <b-open> statements <b-close>
else-statement = <'else'> <whitespace> statement
               | <'else'> <b-open> statements <b-close>

<statements> = statement*

invocation = <p-open> expr <p-close>

return = <'return'> <whitespace> expr <semi-c>;

binop = '+' | '-' | '*' | '/' | '>' | '=='

whitespace = #"\s+"
identifier = #"[a-zA-Z]+" | '*' <whitespace?> identifier
constant = '0' | #"[1-9][0-9]*"

p-open = <whitespace?> '(' <whitespace?>
p-close = <whitespace?> ')' <whitespace?>
b-open = <whitespace?> '{' <whitespace?>
b-close = <whitespace?> '}' <whitespace?>
comma = <whitespace?> ',' <whitespace?>
semi-c = <whitespace?> ';' <whitespace?>